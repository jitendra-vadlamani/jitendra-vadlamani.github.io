2:I[4505,["505","static/chunks/505-8893f2373765d769.js","399","static/chunks/399-267892f75144738e.js","308","static/chunks/app/blog/%5Bslug%5D/page-ff0b161b9366883a.js"],""]
4:I[8868,[],""]
6:I[2289,[],""]
7:I[1274,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"Analytics"]
8:I[8289,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"SpeedInsights"]
9:I[6570,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"default"]
5:["slug","javascript_closure","d"]
0:["0mmrlA2KQwNqFjEcbewF0",[[["",{"children":["blog",{"children":[["slug","javascript_closure","d"],{"children":["__PAGE__?{\"slug\":\"javascript_closure\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","javascript_closure","d"],{"children":["__PAGE__",{},[["$L1",["$","section",null,{"className":"relative","children":[["$","div",null,{"className":"absolute inset-0 bg-gradient-to-br from-blue-50/20 via-white to-indigo-50/20 rounded-xl -z-10"}],["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"JavaScript Closures: The Hidden Power of Function Scope\",\"datePublished\":\"2025-05-17\",\"dateModified\":\"2025-05-17\",\"description\":\"Discover how JavaScript closures work, why they're essential for modern web development, and practical examples to master this powerful concept.\",\"url\":\"https://jitendra-vadlamani.github.io/blog/javascript_closure\",\"author\":{\"@type\":\"Person\",\"name\":\"Jitendra Vadlamani\"}}"}}],["$","div",null,{"className":"mb-2","children":["$","$L2",null,{"href":"/blog","className":"text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-1","children":[["$","span",null,{"children":"←"}]," Back to all posts"]}]}],["$","div",null,{"className":"flex items-center mb-0.5 text-xs text-slate-400","children":[["$","p",null,{"children":"May 17, 2025"}],["$","span",null,{"className":"ml-1.5 text-xs","children":[5," min read"]}],["$","div",null,{"className":"flex flex-wrap gap-1 ml-1.5","children":[["$","span","0",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"JavaScript"}],["$","span","1",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"Web Development"}],["$","span","2",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"Programming Concepts"}]]}]]}],["$","div",null,{"className":"bg-white/50 backdrop-blur-sm p-1.5 rounded-lg","children":["$","article",null,{"className":"prose prose-sm max-w-none  prose-headings:font-medium prose-headings:text-slate-900  prose-h2:mt-3 prose-h2:mb-1 prose-h3:mt-2 prose-h3:mb-1 prose-p:text-slate-600 prose-p:my-1 prose-a:text-blue-600 prose-a:no-underline hover:prose-a:underline  prose-code:text-slate-800 prose-code:bg-slate-100 prose-code:rounded prose-code:px-1 prose-code:py-0 prose-code:text-sm  prose-pre:my-1.5 prose-ol:my-1.5 prose-ul:my-1.5  prose-li:my-0 prose-li:mb-0.5 prose-blockquote:border-l-2 prose-blockquote:border-slate-200 prose-blockquote:pl-3 prose-blockquote:italic prose-blockquote:text-slate-500 prose-blockquote:my-1.5 [&>*:first-child]:mt-0 [&>*:last-child]:mb-0 prose-hr:my-2","children":["$","div",null,{"children":"$L3"}]}]}]]}]],null],null]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased min-h-screen flex flex-col bg-white shadow-sm text-black ","children":[["$","nav",null,{"className":"sticky top-0 w-full bg-white/90 py-4 border-b border-slate-200 z-20 backdrop-blur-sm shadow-sm","children":["$","div",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8","children":["$","div",null,{"className":"flex justify-between items-center","children":[["$","$L2",null,{"href":"/","className":"font-bold text-xl text-slate-900 hover:text-blue-600 transition-all","children":"Jitendra"}],["$","div",null,{"className":"flex space-x-8"}],["$","div",null,{"className":"hidden sm:block"}]]}]}]}],["$","div",null,{"className":"w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-2","children":["$","main",null,{"className":"flex-auto min-w-0 flex flex-col","children":[["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","section",null,{"children":[["$","h1",null,{"className":"mb-8 text-2xl font-semibold tracking-tighter","children":"404 - Page Not Found"}],["$","p",null,{"className":"mb-4","children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}],["$","$L8",null,{}],["$","$L9",null,{}]]}]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e7de096a8e73dbb6.css","precedence":"next","crossOrigin":"$undefined"}]],"$La"]]]]
b:I[9235,["505","static/chunks/505-8893f2373765d769.js","399","static/chunks/399-267892f75144738e.js","308","static/chunks/app/blog/%5Bslug%5D/page-ff0b161b9366883a.js"],"default"]
c:T22a1,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createGreeter</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greeting</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--comment" style="color: var(--sh-comment)">// This outer function defines a variable &#039;greeting&#039;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greet</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// The inner function has access to &#039;greeting&#039;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greeting</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)">, </span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">!</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greet</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Return the inner function</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">sayHello</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createGreeter</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Hello</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">sayHowdy</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createGreeter</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Howdy</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">sayHello</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Alex</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Outputs: &quot;Hello, Alex!&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">sayHowdy</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Taylor</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Outputs: &quot;Howdy, Taylor!&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>d:T30e0,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createCounter</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">let</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">count</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">0</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Private variable</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">increment</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">count</span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">count</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">decrement</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">count</span><span class="sh__token--sign" style="color: var(--sh-sign)">-</span><span class="sh__token--sign" style="color: var(--sh-sign)">-</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">count</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">getValue</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">count</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">counter</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createCounter</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">counter</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">getValue</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// 0</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">counter</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">increment</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">counter</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">increment</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">counter</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">getValue</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// 2</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">counter</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">count</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// undefined - can&#039;t access directly!</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>e:T1e74,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createUrlGenerator</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">baseUrl</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">endpoint</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">baseUrl</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)">/</span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">endpoint</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">apiUrlGenerator</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createUrlGenerator</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">https://api.myapp.com/v1</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">imageUrlGenerator</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createUrlGenerator</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">https://images.myapp.com</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">apiUrlGenerator</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">users</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// https://api.myapp.com/v1/users</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">imageUrlGenerator</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">profile.jpg</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// https://images.myapp.com/profile.jpg</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>f:T1ab9,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">setupButton</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">buttonId</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">message</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">document</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">getElementById</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">buttonId</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">addEventListener</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">click</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">alert</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">message</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Closure over &#039;message&#039;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">setupButton</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">saveButton</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Changes saved!</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">setupButton</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">cancelButton</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Operation cancelled.</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>10:T26a0,<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Problematic code</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createButtons</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">for</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">var</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">0</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">3</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">document</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">createElement</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">button</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">textContent</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Button </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">addEventListener</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">click</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">alert</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Button </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)"> clicked</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">document</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">body</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">appendChild</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// All buttons will alert &quot;Button 3 clicked&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>11:T3d0f,<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Fixed version</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createButtons</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">for</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">var</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">0</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">3</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">document</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">createElement</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">button</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">textContent</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Button </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Extra function creates a new scope</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">buttonIndex</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">addEventListener</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">click</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">        </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">alert</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Button </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">buttonIndex</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)"> clicked</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">document</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">body</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">appendChild</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">button</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Or simply use let instead of var</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">createButtonsModern</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">for</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">let</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">0</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">3</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">i</span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// &#039;let&#039; creates a new binding for each loop iteration</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// so each function closes over a different value</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// ...same code as above...</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>12:T1932,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">potentialProblem</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">largeData</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">new</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">Array</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--class" style="color: var(--sh-class)">1000000</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">fill</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">x</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Large array</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">processorFn</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// References largeData, keeping it in memory</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">largeData</span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--class" style="color: var(--sh-class)">0</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">processorFn</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">processor</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">potentialProblem</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// largeData stays in memory!</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>3:[["$","h1",null,{"id":"javascript-closures-the-hidden-power-of-function-scope","children":[[["$","a","link-javascript-closures-the-hidden-power-of-function-scope",{"href":"#javascript-closures-the-hidden-power-of-function-scope","className":"anchor"}]],"JavaScript Closures: The Hidden Power of Function Scope"]}],"\n",["$","p",null,{"children":"The interview question caught me off guard. \"Can you explain closures in JavaScript?\" I froze momentarily, realizing I'd been using them for years without fully understanding them. That interview made me dive deep into closures - one of JavaScript's most elegant yet frequently misunderstood features."}],"\n",["$","p",null,{"children":"Whether you're preparing for interviews or simply want to write better JavaScript, understanding closures will transform how you approach your code. Let me show you what took me years to fully grasp."}],"\n",["$","h2",null,{"id":"what-are-closures","children":[[["$","a","link-what-are-closures",{"href":"#what-are-closures","className":"anchor"}]],"What Are Closures?"]}],"\n",["$","p",null,{"children":"At their core, closures are a combination of a function and the lexical environment within which that function was declared. In simpler terms: a closure is a function that remembers and accesses variables from the scope in which it was created, even when it's executed outside that scope."}],"\n",["$","p",null,{"children":"This isn't just academic knowledge—closures are the foundation for modern JavaScript patterns like modules, callbacks, and functional programming techniques."}],"\n",["$","h2",null,{"id":"closures-in-action","children":[[["$","a","link-closures-in-action",{"href":"#closures-in-action","className":"anchor"}]],"Closures in Action"]}],"\n",["$","p",null,{"children":"Let's see a simple example:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$c"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"What's happening here is fascinating:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">createGreeter</span><span class=\"sh__token--sign\" style=\"color: var(--sh-sign)\">(</span><span class=\"sh__token--sign\" style=\"color: var(--sh-sign)\">)</span></span>"}}]," runs and returns the inner ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">greet</span><span class=\"sh__token--sign\" style=\"color: var(--sh-sign)\">(</span><span class=\"sh__token--sign\" style=\"color: var(--sh-sign)\">)</span></span>"}}]," function"]}],"\n",["$","li",null,{"children":["That returned function is assigned to ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">sayHello</span></span>"}}]," and ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">sayHowdy</span></span>"}}]]}],"\n",["$","li",null,{"children":[["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">createGreeter</span><span class=\"sh__token--sign\" style=\"color: var(--sh-sign)\">(</span><span class=\"sh__token--sign\" style=\"color: var(--sh-sign)\">)</span></span>"}}]," has finished executing, yet..."]}],"\n",["$","li",null,{"children":["When we call ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">sayHello</span><span class=\"sh__token--sign\" style=\"color: var(--sh-sign)\">(</span><span class=\"sh__token--string\" style=\"color: var(--sh-string)\">&quot;</span><span class=\"sh__token--string\" style=\"color: var(--sh-string)\">Alex</span><span class=\"sh__token--string\" style=\"color: var(--sh-string)\">&quot;</span><span class=\"sh__token--sign\" style=\"color: var(--sh-sign)\">)</span></span>"}}],", it still remembers that ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">greeting</span></span>"}}]," was \"Hello\""]}],"\n"]}],"\n",["$","p",null,{"children":"This is a closure in action. The inner function maintains access to its outer function's variables even after the outer function has returned."}],"\n",["$","h2",null,{"id":"why-closures-matter","children":[[["$","a","link-why-closures-matter",{"href":"#why-closures-matter","className":"anchor"}]],"Why Closures Matter"]}],"\n",["$","p",null,{"children":"Closures aren't just a language curiosity. They're essential to modern JavaScript for several reasons:"}],"\n",["$","h3",null,{"id":"1-data-privacy-and-encapsulation","children":[[["$","a","link-1-data-privacy-and-encapsulation",{"href":"#1-data-privacy-and-encapsulation","className":"anchor"}]],"1. Data Privacy and Encapsulation"]}],"\n",["$","p",null,{"children":"Closures give us a way to create private variables in JavaScript:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$d"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">count</span></span>"}}]," variable is not accessible directly from outside, protecting it from accidental modification."]}],"\n",["$","h3",null,{"id":"2-factory-functions-and-configuration","children":[[["$","a","link-2-factory-functions-and-configuration",{"href":"#2-factory-functions-and-configuration","className":"anchor"}]],"2. Factory Functions and Configuration"]}],"\n",["$","p",null,{"children":"Closures let us create specialized functions with pre-configured behavior:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"This pattern is incredibly useful for configuration and maintaining DRY code."}],"\n",["$","h3",null,{"id":"3-event-handlers-and-callbacks","children":[[["$","a","link-3-event-handlers-and-callbacks",{"href":"#3-event-handlers-and-callbacks","className":"anchor"}]],"3. Event Handlers and Callbacks"]}],"\n",["$","p",null,{"children":["Ever used ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">addEventListener</span></span>"}}],"? You've used closures:"]}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":["Each click handler maintains access to its specific message parameter through closure, even though ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">setupButton</span></span>"}}]," finished running long ago."]}],"\n",["$","h2",null,{"id":"common-closure-pitfalls","children":[[["$","a","link-common-closure-pitfalls",{"href":"#common-closure-pitfalls","className":"anchor"}]],"Common Closure Pitfalls"]}],"\n",["$","h3",null,{"id":"the-loop-closure-problem","children":[[["$","a","link-the-loop-closure-problem",{"href":"#the-loop-closure-problem","className":"anchor"}]],"The Loop Closure Problem"]}],"\n",["$","p",null,{"children":"One classic closure pitfall occurs when creating functions inside loops:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":["The issue: all event listeners share the same ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">i</span></span>"}}]," reference. By the time any button is clicked, the loop has finished and ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--identifier\" style=\"color: var(--sh-identifier)\">i</span></span>"}}]," is 3."]}],"\n",["$","p",null,{"children":"The solution uses an additional closure:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"},"className":"language-javascript"}]}],"\n",["$","h2",null,{"id":"memory-implications","children":[[["$","a","link-memory-implications",{"href":"#memory-implications","className":"anchor"}]],"Memory Implications"]}],"\n",["$","p",null,{"children":"Closures can lead to memory leaks if you're not careful. When a function references variables from its outer scope, those variables are kept in memory as long as the function exists."}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$12"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"Be mindful of which variables you reference in closures, especially with large data structures or DOM elements."}],"\n",["$","h2",null,{"id":"modern-javascript-and-closures","children":[[["$","a","link-modern-javascript-and-closures",{"href":"#modern-javascript-and-closures","className":"anchor"}]],"Modern JavaScript and Closures"]}],"\n",["$","p",null,{"children":"In today's JavaScript ecosystem, closures are used in:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"React hooks"}]," for maintaining component state"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Redux"}]," for creating middleware"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Module patterns"}]," for organizing code"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Partial application"}]," and other functional programming techniques"]}],"\n"]}],"\n",["$","h2",null,{"id":"wrapping-up","children":[[["$","a","link-wrapping-up",{"href":"#wrapping-up","className":"anchor"}]],"Wrapping Up"]}],"\n",["$","p",null,{"children":"Closures aren't just an academic JavaScript concept—they're a practical tool that helps us write more expressive, modular, and maintainable code. They enable data privacy, function factories, and elegant callback handling that wouldn't otherwise be possible."}],"\n",["$","p",null,{"children":"Once you truly grasp closures, you'll find yourself writing JavaScript with newfound confidence and creativity. I know I did after that humbling interview experience."}]]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"JavaScript Closures: The Hidden Power of Function Scope | Jitendra Vadlamani"}],["$","meta","3",{"name":"description","content":"Discover how JavaScript closures work, why they're essential for modern web development, and practical examples to master this powerful concept."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"JavaScript Closures: The Hidden Power of Function Scope"}],["$","meta","7",{"property":"og:description","content":"Discover how JavaScript closures work, why they're essential for modern web development, and practical examples to master this powerful concept."}],["$","meta","8",{"property":"og:url","content":"https://jitendra-vadlamani.github.io/blog/javascript_closure"}],["$","meta","9",{"property":"og:type","content":"article"}],["$","meta","10",{"property":"article:published_time","content":"2025-05-17"}],["$","meta","11",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","12",{"name":"twitter:title","content":"JavaScript Closures: The Hidden Power of Function Scope"}],["$","meta","13",{"name":"twitter:description","content":"Discover how JavaScript closures work, why they're essential for modern web development, and practical examples to master this powerful concept."}]]
1:null
