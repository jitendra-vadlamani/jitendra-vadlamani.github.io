2:I[4505,["505","static/chunks/505-8893f2373765d769.js","399","static/chunks/399-267892f75144738e.js","308","static/chunks/app/blog/%5Bslug%5D/page-ff0b161b9366883a.js"],""]
4:I[8868,[],""]
6:I[2289,[],""]
7:I[1274,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"Analytics"]
8:I[8289,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"SpeedInsights"]
9:I[6570,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"default"]
5:["slug","database_connection_pooling","d"]
0:["Dy16cUW47xprdgrBD0DOu",[[["",{"children":["blog",{"children":[["slug","database_connection_pooling","d"],{"children":["__PAGE__?{\"slug\":\"database_connection_pooling\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","database_connection_pooling","d"],{"children":["__PAGE__",{},[["$L1",["$","section",null,{"className":"relative","children":[["$","div",null,{"className":"absolute inset-0 bg-gradient-to-br from-blue-50/20 via-white to-indigo-50/20 rounded-xl -z-10"}],["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"MongoDB Connection Pooling in Node.js: My First Dev Task\",\"datePublished\":\"2025-05-14\",\"dateModified\":\"2025-05-14\",\"description\":\"How I improved app performance by implementing MongoDB connection pooling in Node.js and the lessons I learned along the way.\",\"url\":\"https://jitendra-vadlamani.github.io/blog/database_connection_pooling\",\"author\":{\"@type\":\"Person\",\"name\":\"Jitendra Vadlamani\"}}"}}],["$","div",null,{"className":"mb-2","children":["$","$L2",null,{"href":"/blog","className":"text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-1","children":[["$","span",null,{"children":"←"}]," Back to all posts"]}]}],["$","div",null,{"className":"flex items-center mb-0.5 text-xs text-slate-400","children":[["$","p",null,{"children":"May 14, 2025"}],["$","span",null,{"className":"ml-1.5 text-xs","children":[6," min read"]}],["$","div",null,{"className":"flex flex-wrap gap-1 ml-1.5","children":[["$","span","0",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"MongoDB"}],["$","span","1",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"Node.js"}],["$","span","2",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"Performance"}],["$","span","3",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"Database"}]]}]]}],["$","div",null,{"className":"bg-white/50 backdrop-blur-sm p-1.5 rounded-lg","children":["$","article",null,{"className":"prose prose-sm max-w-none  prose-headings:font-medium prose-headings:text-slate-900  prose-h2:mt-3 prose-h2:mb-1 prose-h3:mt-2 prose-h3:mb-1 prose-p:text-slate-600 prose-p:my-1 prose-a:text-blue-600 prose-a:no-underline hover:prose-a:underline  prose-code:text-slate-800 prose-code:bg-slate-100 prose-code:rounded prose-code:px-1 prose-code:py-0 prose-code:text-sm  prose-pre:my-1.5 prose-ol:my-1.5 prose-ul:my-1.5  prose-li:my-0 prose-li:mb-0.5 prose-blockquote:border-l-2 prose-blockquote:border-slate-200 prose-blockquote:pl-3 prose-blockquote:italic prose-blockquote:text-slate-500 prose-blockquote:my-1.5 [&>*:first-child]:mt-0 [&>*:last-child]:mb-0 prose-hr:my-2","children":["$","div",null,{"children":"$L3"}]}]}]]}]],null],null]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased min-h-screen flex flex-col bg-white shadow-sm text-black ","children":[["$","nav",null,{"className":"sticky top-0 w-full bg-white/90 py-4 border-b border-slate-200 z-20 backdrop-blur-sm shadow-sm","children":["$","div",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8","children":["$","div",null,{"className":"flex justify-between items-center","children":[["$","$L2",null,{"href":"/","className":"font-bold text-xl text-slate-900 hover:text-blue-600 transition-all","children":"Jitendra"}],["$","div",null,{"className":"flex space-x-8"}],["$","div",null,{"className":"hidden sm:block"}]]}]}]}],["$","div",null,{"className":"w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-2","children":["$","main",null,{"className":"flex-auto min-w-0 flex flex-col","children":[["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","section",null,{"children":[["$","h1",null,{"className":"mb-8 text-2xl font-semibold tracking-tighter","children":"404 - Page Not Found"}],["$","p",null,{"className":"mb-4","children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}],["$","$L8",null,{}],["$","$L9",null,{}]]}]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/688bba041c8ccd31.css","precedence":"next","crossOrigin":"$undefined"}]],"$La"]]]]
b:I[9235,["505","static/chunks/505-8893f2373765d769.js","399","static/chunks/399-267892f75144738e.js","308","static/chunks/app/blog/%5Bslug%5D/page-ff0b161b9366883a.js"],"default"]
c:T2e28,<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Before pooling - what I was doing wrong</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">MongoClient</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">require</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">mongodb</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">async</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">getMongoConnection</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">new</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">MongoClient</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">mongodb://localhost:27017</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">connect</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">db</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">finance_app</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Each request was doing this:</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">async</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">getUserBalance</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">userId</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">db</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">getMongoConnection</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">result</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">db</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">collection</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">accounts</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">findOne</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">userId</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">db</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">client</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">close</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Often this wasn&#039;t even happening properly</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">result</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">balance</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>d:T4298,<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// After implementing pooling</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">MongoClient</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">require</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">mongodb</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Global connection pool</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">let</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">async</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">connectToDatabase</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">if</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">new</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">MongoClient</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">mongodb://localhost:27017</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Pool size - I started with 10 and tuned based on our load</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">maxPoolSize</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">10</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// How long a connection request can wait before timing out</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">waitQueueTimeoutMS</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">2000</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Keep connections alive</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">keepAlive</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">true</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Create the initial connection pool when the app starts</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">connect</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Now each request uses the pool</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">async</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">getUserBalance</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">userId</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">connectToDatabase</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">db</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">db</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">finance_app</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">result</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">db</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">collection</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">accounts</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">findOne</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">userId</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--comment" style="color: var(--sh-comment)">// No need to close the connection - it returns to the pool</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">result</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">balance</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>e:T95f,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">new</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">MongoClient</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">mongodb://localhost:27017</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">maxPoolSize</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">20</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Other options...</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>f:T3b3e,<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// How I improved error handling</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">async</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">connectToDatabase</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">if</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Added error recovery logic</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">try</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Test if the existing pool is still valid</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">db</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">admin</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">command</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">ping</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">1</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">catch</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">e</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Connection pool error, recreating...</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">null</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Create new connection pool with retry logic</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">new</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">MongoClient</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">mongodb://localhost:27017</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">maxPoolSize</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">20</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">waitQueueTimeoutMS</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">2000</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">keepAlive</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">true</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">retryWrites</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">true</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">retryReads</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">true</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">serverSelectionTimeoutMS</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">5000</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">connect</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>10:T285c,<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Setup basic monitoring on our connection pool</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">setInterval</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">async</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">try</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">clientPromise</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">poolStats</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">client</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">db</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">admin</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">command</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">serverStatus</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">1</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">connections</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">poolStats</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">connections</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">timestamp</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">new</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">Date</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">catch</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">e</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">error</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Failed to get connection stats:</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">e</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">60000</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Check every minute</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>11:T2b1f,<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// With Mongoose, connection pooling is even simpler</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">mongoose</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">require</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">mongoose</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Connection pool is automatically established</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">mongoose</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">connect</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">mongodb://localhost:27017/finance_app</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">maxPoolSize</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">20</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">serverSelectionTimeoutMS</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">5000</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">socketTimeoutMS</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">45000</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Create models</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">Account</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">mongoose</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">model</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--string" style="color: var(--sh-string)">Account</span><span class="sh__token--string" style="color: var(--sh-string)">&#039;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">userId</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">String</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">balance</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">Number</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Use the connection pool transparently</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">async</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">getUserBalance</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">userId</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">account</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">await</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">Account</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">findOne</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">userId</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">exec</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">account</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">balance</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>3:[["$","h1",null,{"id":"mongodb-connection-pooling-in-nodejs-my-first-dev-task","children":[[["$","a","link-mongodb-connection-pooling-in-nodejs-my-first-dev-task",{"href":"#mongodb-connection-pooling-in-nodejs-my-first-dev-task","className":"anchor"}]],"MongoDB Connection Pooling in Node.js: My First Dev Task"]}],"\n",["$","p",null,{"children":"I still remember my first week at that promising startup. New to the job, eager to impress, and completely unaware of what I was about to learn. My manager called me into a meeting and said: \"Our app is slowing down during peak hours. I want you to implement connection pooling for our MongoDB instance.\""}],"\n",["$","p",null,{"children":"I nodded confidently while panic-googling \"what is connection pooling\" on my phone under the table. If you're in the same boat I was, let me save you some time and share what I learned the hard way."}],"\n",["$","h2",null,{"id":"the-problem-i-was-solving","children":[[["$","a","link-the-problem-i-was-solving",{"href":"#the-problem-i-was-solving","className":"anchor"}]],"The Problem I Was Solving"]}],"\n",["$","p",null,{"children":"Our Node.js application was experiencing significant performance issues. During morning rushes, the app would slow to a crawl, and sometimes even crash. After some investigation, I discovered what was happening:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Each new user request was creating a fresh MongoDB connection"}],"\n",["$","li",null,{"children":"These connections are expensive (taking 100-200ms to establish)"}],"\n",["$","li",null,{"children":"MongoDB was hitting connection limits during peak traffic"}],"\n",["$","li",null,{"children":"Connections weren't being properly closed, creating memory leaks"}],"\n"]}],"\n",["$","p",null,{"children":"The solution? Connection pooling - one of those things that sounds complicated but is surprisingly simple to implement and makes a massive difference."}],"\n",["$","h2",null,{"id":"what-connection-pooling-actually-is","children":[[["$","a","link-what-connection-pooling-actually-is",{"href":"#what-connection-pooling-actually-is","className":"anchor"}]],"What Connection Pooling Actually Is"]}],"\n",["$","p",null,{"children":"In simple terms, connection pooling is like having a small team of workers ready to go instead of hiring and training a new worker every time you have a task."}],"\n",["$","p",null,{"children":"Without pooling, the flow looks like this:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"User makes request → Open database connection → Run query → Close connection → Respond"}],"\n",["$","li",null,{"children":"Next user? Repeat the whole process again"}],"\n"]}],"\n",["$","p",null,{"children":"With pooling:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"App starts → Create a pool of reusable connections"}],"\n",["$","li",null,{"children":"User makes request → Borrow connection from pool → Run query → Return connection to pool → Respond"}],"\n",["$","li",null,{"children":"Next user? Just grab an available connection from the pool"}],"\n"]}],"\n",["$","p",null,{"children":"This eliminates the overhead of repeatedly establishing connections, which is especially important for MongoDB since the connection process involves several network roundtrips."}],"\n",["$","h2",null,{"id":"how-i-implemented-it-in-nodejs-and-mongodb","children":[[["$","a","link-how-i-implemented-it-in-nodejs-and-mongodb",{"href":"#how-i-implemented-it-in-nodejs-and-mongodb","className":"anchor"}]],"How I Implemented It in Node.js and MongoDB"]}],"\n",["$","p",null,{"children":"When I was given this task, I was using the native MongoDB Node.js driver. Here's how I set up the connection pool:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$c"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"And here's how I implemented the pooling solution:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$d"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"The key difference? I was connecting once at application startup rather than for every request, and the driver managed the connection pool for me."}],"\n",["$","h2",null,{"id":"what-i-learned-through-trial-and-error","children":[[["$","a","link-what-i-learned-through-trial-and-error",{"href":"#what-i-learned-through-trial-and-error","className":"anchor"}]],"What I Learned Through Trial and Error"]}],"\n",["$","p",null,{"children":"My initial implementation wasn't perfect. Here are some lessons I learned while debugging and optimizing:"}],"\n",["$","h3",null,{"id":"1-connection-pool-size-matters","children":[[["$","a","link-1-connection-pool-size-matters",{"href":"#1-connection-pool-size-matters","className":"anchor"}]],"1. Connection Pool Size Matters"]}],"\n",["$","p",null,{"children":"My first attempt used the default pool size (5 connections), which wasn't enough for our load. After monitoring our peak concurrent users, I adjusted it to 20:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"But be careful - too large a pool can overwhelm your MongoDB server. It's a balancing act."}],"\n",["$","h3",null,{"id":"2-handle-connection-failures-gracefully","children":[[["$","a","link-2-handle-connection-failures-gracefully",{"href":"#2-handle-connection-failures-gracefully","className":"anchor"}]],"2. Handle Connection Failures Gracefully"]}],"\n",["$","p",null,{"children":"My early implementation didn't handle connection failures well:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"},"className":"language-javascript"}]}],"\n",["$","h3",null,{"id":"3-monitor-pool-metrics","children":[[["$","a","link-3-monitor-pool-metrics",{"href":"#3-monitor-pool-metrics","className":"anchor"}]],"3. Monitor Pool Metrics"]}],"\n",["$","p",null,{"children":"I added monitoring to understand our connection usage patterns:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"This helped me tune the pool size and identify issues before users were affected."}],"\n",["$","h2",null,{"id":"results-that-made-me-look-good","children":[[["$","a","link-results-that-made-me-look-good",{"href":"#results-that-made-me-look-good","className":"anchor"}]],"Results That Made Me Look Good"]}],"\n",["$","p",null,{"children":"After implementing connection pooling:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Average response time dropped from 270ms to 85ms"}],"\n",["$","li",null,{"children":"CPU usage on our MongoDB server decreased by about 40%"}],"\n",["$","li",null,{"children":"The app handled 3x more concurrent users before showing signs of stress"}],"\n",["$","li",null,{"children":"Morning crashes became a thing of the past"}],"\n"]}],"\n",["$","p",null,{"children":"My manager was impressed, and I got a lot of credit for a relatively simple change."}],"\n",["$","h2",null,{"id":"when-to-use-mongoose-instead","children":[[["$","a","link-when-to-use-mongoose-instead",{"href":"#when-to-use-mongoose-instead","className":"anchor"}]],"When to Use Mongoose Instead"]}],"\n",["$","p",null,{"children":"For many of our microservices, we eventually switched to Mongoose, which handles connection pooling automatically:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$11"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"Mongoose abstracts away a lot of the connection management details, which I appreciated as our app grew more complex."}],"\n",["$","h2",null,{"id":"common-pitfalls-i-hit","children":[[["$","a","link-common-pitfalls-i-hit",{"href":"#common-pitfalls-i-hit","className":"anchor"}]],"Common Pitfalls I Hit"]}],"\n",["$","p",null,{"children":"Some mistakes I made that you can avoid:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Not handling connection errors"}]," - When MongoDB briefly went down, our pool didn't recover automatically"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Pool size too small"}]," - Under-provisioning connections led to request queuing"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Pool size too large"}]," - Over-provisioning wasted server resources"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Missing slow query monitoring"}]," - Some queries were blocking connections for too long"]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Not considering serverless environments"}]," - Our AWS Lambda functions needed different pooling strategies"]}],"\n"]}],"\n",["$","h2",null,{"id":"conclusion","children":[[["$","a","link-conclusion",{"href":"#conclusion","className":"anchor"}]],"Conclusion"]}],"\n",["$","p",null,{"children":"Implementing connection pooling was my introduction to performance optimization, and it taught me that sometimes the simplest changes have the biggest impact. Now it's one of the first things I check when I join a new project or troubleshoot performance issues."}],"\n",["$","p",null,{"children":"If you take one thing away from this post, let it be this: don't create new database connections for every request. Set up proper connection pooling from day one, and your app (and future you) will thank you for it."}]]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"MongoDB Connection Pooling in Node.js: My First Dev Task | Jitendra Vadlamani"}],["$","meta","3",{"name":"description","content":"How I improved app performance by implementing MongoDB connection pooling in Node.js and the lessons I learned along the way."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"MongoDB Connection Pooling in Node.js: My First Dev Task"}],["$","meta","7",{"property":"og:description","content":"How I improved app performance by implementing MongoDB connection pooling in Node.js and the lessons I learned along the way."}],["$","meta","8",{"property":"og:url","content":"https://jitendra-vadlamani.github.io/blog/database_connection_pooling"}],["$","meta","9",{"property":"og:type","content":"article"}],["$","meta","10",{"property":"article:published_time","content":"2025-05-14"}],["$","meta","11",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","12",{"name":"twitter:title","content":"MongoDB Connection Pooling in Node.js: My First Dev Task"}],["$","meta","13",{"name":"twitter:description","content":"How I improved app performance by implementing MongoDB connection pooling in Node.js and the lessons I learned along the way."}]]
1:null
