2:I[4505,["505","static/chunks/505-8893f2373765d769.js","399","static/chunks/399-267892f75144738e.js","308","static/chunks/app/blog/%5Bslug%5D/page-ff0b161b9366883a.js"],""]
4:I[8868,[],""]
6:I[2289,[],""]
7:I[1274,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"Analytics"]
8:I[8289,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"SpeedInsights"]
9:I[6570,["505","static/chunks/505-8893f2373765d769.js","185","static/chunks/app/layout-029dd5a9a340f952.js"],"default"]
5:["slug","javascript_call_bind_apply","d"]
0:["0mmrlA2KQwNqFjEcbewF0",[[["",{"children":["blog",{"children":[["slug","javascript_call_bind_apply","d"],{"children":["__PAGE__?{\"slug\":\"javascript_call_bind_apply\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","javascript_call_bind_apply","d"],{"children":["__PAGE__",{},[["$L1",["$","section",null,{"className":"relative","children":[["$","div",null,{"className":"absolute inset-0 bg-gradient-to-br from-blue-50/20 via-white to-indigo-50/20 rounded-xl -z-10"}],["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"JavaScript's Power Trio: Call, Bind, and Apply\",\"datePublished\":\"2025-05-17\",\"dateModified\":\"2025-05-17\",\"description\":\"Master JavaScript's call, bind, and apply methods to control function execution contexts and leverage the full flexibility of JavaScript's 'this' keyword.\",\"url\":\"https://jitendra-vadlamani.github.io/blog/javascript_call_bind_apply\",\"author\":{\"@type\":\"Person\",\"name\":\"Jitendra Vadlamani\"}}"}}],["$","div",null,{"className":"mb-2","children":["$","$L2",null,{"href":"/blog","className":"text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-1","children":[["$","span",null,{"children":"←"}]," Back to all posts"]}]}],["$","div",null,{"className":"flex items-center mb-0.5 text-xs text-slate-400","children":[["$","p",null,{"children":"May 17, 2025"}],["$","span",null,{"className":"ml-1.5 text-xs","children":[4," min read"]}],["$","div",null,{"className":"flex flex-wrap gap-1 ml-1.5","children":[["$","span","0",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"JavaScript"}],["$","span","1",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"Web Development"}],["$","span","2",{"className":"text-sm px-2 py-0.5 bg-blue-100 text-blue-700 font-medium rounded-md border border-blue-200","children":"Programming Concepts"}]]}]]}],["$","div",null,{"className":"bg-white/50 backdrop-blur-sm p-1.5 rounded-lg","children":["$","article",null,{"className":"prose prose-sm max-w-none  prose-headings:font-medium prose-headings:text-slate-900  prose-h2:mt-3 prose-h2:mb-1 prose-h3:mt-2 prose-h3:mb-1 prose-p:text-slate-600 prose-p:my-1 prose-a:text-blue-600 prose-a:no-underline hover:prose-a:underline  prose-code:text-slate-800 prose-code:bg-slate-100 prose-code:rounded prose-code:px-1 prose-code:py-0 prose-code:text-sm  prose-pre:my-1.5 prose-ol:my-1.5 prose-ul:my-1.5  prose-li:my-0 prose-li:mb-0.5 prose-blockquote:border-l-2 prose-blockquote:border-slate-200 prose-blockquote:pl-3 prose-blockquote:italic prose-blockquote:text-slate-500 prose-blockquote:my-1.5 [&>*:first-child]:mt-0 [&>*:last-child]:mb-0 prose-hr:my-2","children":["$","div",null,{"children":"$L3"}]}]}]]}]],null],null]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased min-h-screen flex flex-col bg-white shadow-sm text-black ","children":[["$","nav",null,{"className":"sticky top-0 w-full bg-white/90 py-4 border-b border-slate-200 z-20 backdrop-blur-sm shadow-sm","children":["$","div",null,{"className":"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8","children":["$","div",null,{"className":"flex justify-between items-center","children":[["$","$L2",null,{"href":"/","className":"font-bold text-xl text-slate-900 hover:text-blue-600 transition-all","children":"Jitendra"}],["$","div",null,{"className":"flex space-x-8"}],["$","div",null,{"className":"hidden sm:block"}]]}]}]}],["$","div",null,{"className":"w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-2","children":["$","main",null,{"className":"flex-auto min-w-0 flex flex-col","children":[["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","section",null,{"children":[["$","h1",null,{"className":"mb-8 text-2xl font-semibold tracking-tighter","children":"404 - Page Not Found"}],["$","p",null,{"className":"mb-4","children":"The page you are looking for does not exist."}]]}],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}],["$","$L8",null,{}],["$","$L9",null,{}]]}]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e7de096a8e73dbb6.css","precedence":"next","crossOrigin":"$undefined"}]],"$La"]]]]
b:I[9235,["505","static/chunks/505-8893f2373765d769.js","399","static/chunks/399-267892f75144738e.js","308","static/chunks/app/blog/%5Bslug%5D/page-ff0b161b9366883a.js"],"default"]
c:T17d8,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">user</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Alex</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greet</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--string" style="color: var(--sh-string)">Hello, my name is </span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">this</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">user</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">greet</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Outputs: &quot;Hello, my name is Alex&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// But what happens here?</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greetFunction</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">user</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">greet</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">greetFunction</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// Outputs: &quot;Hello, my name is undefined&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>d:T2314,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">introduce</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greeting</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">punctuation</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greeting</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)">, my name is </span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">this</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">punctuation</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">person1</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Taylor</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">person2</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Jordan</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Using call to set &#039;this&#039; and pass arguments</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">introduce</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">call</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">person1</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Hello</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">!</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// &quot;Hello, my name is Taylor!&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">introduce</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">call</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">person2</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Hi there</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">...</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// &quot;Hi there, my name is Jordan...&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>e:T1913,<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Same function as before</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">introduce</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greeting</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">punctuation</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">greeting</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)">, my name is </span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">this</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">punctuation</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">person</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Morgan</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Using apply with an array of arguments</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">introduce</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">apply</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">person</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Greetings</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">!</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// &quot;Greetings, my name is Morgan!&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>f:T1893,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">describe</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">this</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)"> is </span><span class="sh__token--sign" style="color: var(--sh-sign)">${</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">this</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">age</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--string" style="color: var(--sh-string)"> years old</span><span class="sh__token--string" style="color: var(--sh-string)">`</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">charlie</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">name</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Charlie</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">age</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">30</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">describeCharlie</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">describe</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">bind</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">charlie</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Later in your code, even in a different context:</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">describeCharlie</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// &quot;Charlie is 30 years old&quot;</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>10:T2b68,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">calculator</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">values</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">sum</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">this</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">values</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">reduce</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">total</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">value</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">total</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">+</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">value</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">0</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">numbersA</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">values</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--class" style="color: var(--sh-class)">1</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">2</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">3</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">4</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">numbersB</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">values</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--class" style="color: var(--sh-class)">10</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">20</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">30</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)">// Borrow the sum method</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">calculator</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">sum</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">call</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">numbersA</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// 10</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span><span class="sh__token--identifier" style="color: var(--sh-identifier)">console</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">log</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">calculator</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">sum</span><span class="sh__token--sign" style="color: var(--sh-sign)">.</span><span class="sh__token--property" style="color: var(--sh-property)">apply</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">numbersB</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--comment" style="color: var(--sh-comment)">// 60</span></span>
<span class="sh__line"><span class="sh__token--comment" style="color: var(--sh-comment)"></span></span>3:[["$","h1",null,{"id":"javascripts-power-trio-call-bind-and-apply","children":[[["$","a","link-javascripts-power-trio-call-bind-and-apply",{"href":"#javascripts-power-trio-call-bind-and-apply","className":"anchor"}]],"JavaScript's Power Trio: Call, Bind, and Apply"]}],"\n",["$","p",null,{"children":["I'll never forget the day I was debugging a complex JavaScript application when I encountered a maddening \"undefined\" error. I spent nearly a full day before realizing the issue: the notorious ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," keyword wasn't pointing to what I expected. That's when I finally appreciated the true importance of JavaScript's ",["$","strong",null,{"children":"call"}],", ",["$","strong",null,{"children":"bind"}],", and ",["$","strong",null,{"children":"apply"}]," methods."]}],"\n",["$","p",null,{"children":"These three methods are essential tools for any JavaScript developer, allowing precise control over function execution context—something that becomes critically important in any non-trivial application."}],"\n",["$","h2",null,{"id":"understanding-the-problem-with-this","children":[[["$","a","link-understanding-the-problem-with-this",{"href":"#understanding-the-problem-with-this","className":"anchor"}]],"Understanding the Problem with 'this'"]}],"\n",["$","p",null,{"children":"Before we dive into our power trio, let's understand why they're needed:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$c"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":["When we call ",["$","strong",null,{"children":"greetFunction()"}],", the ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," context is lost. This is where ",["$","strong",null,{"children":"call"}],", ",["$","strong",null,{"children":"bind"}],", and ",["$","strong",null,{"children":"apply"}]," come to the rescue."]}],"\n",["$","h2",null,{"id":"the-call-method","children":[[["$","a","link-the-call-method",{"href":"#the-call-method","className":"anchor"}]],"The Call Method"]}],"\n",["$","p",null,{"children":["The ",["$","strong",null,{"children":"call"}]," method allows you to invoke a function with a specified ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," context and arguments provided individually:"]}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$d"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":["In this example, ",["$","strong",null,{"children":"call"}]," allowed us to:"]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["Specify which object should be ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," inside the function"]}],"\n",["$","li",null,{"children":"Pass arguments one by one after the context"}],"\n"]}],"\n",["$","h2",null,{"id":"the-apply-method","children":[[["$","a","link-the-apply-method",{"href":"#the-apply-method","className":"anchor"}]],"The Apply Method"]}],"\n",["$","p",null,{"children":["The ",["$","strong",null,{"children":"apply"}]," method is nearly identical to ",["$","strong",null,{"children":"call"}],", but it takes arguments as an array:"]}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":"This is especially useful when:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"You don't know the number of arguments in advance"}],"\n",["$","li",null,{"children":"You want to pass arguments already contained in an array"}],"\n"]}],"\n",["$","h2",null,{"id":"the-bind-method","children":[[["$","a","link-the-bind-method",{"href":"#the-bind-method","className":"anchor"}]],"The Bind Method"]}],"\n",["$","p",null,{"children":["While ",["$","strong",null,{"children":"call"}]," and ",["$","strong",null,{"children":"apply"}]," execute the function immediately, ",["$","strong",null,{"children":"bind"}]," returns a new function with the ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," value fixed:"]}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$f"},"className":"language-javascript"}]}],"\n",["$","p",null,{"children":["This permanent binding makes ",["$","strong",null,{"children":"bind"}]," perfect for:"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Event handlers"}],"\n",["$","li",null,{"children":"Callback functions"}],"\n",["$","li",null,{"children":"Ensuring methods maintain their context"}],"\n"]}],"\n",["$","h2",null,{"id":"real-world-example-method-borrowing","children":[[["$","a","link-real-world-example-method-borrowing",{"href":"#real-world-example-method-borrowing","className":"anchor"}]],"Real-World Example: Method Borrowing"]}],"\n",["$","p",null,{"children":"One powerful application is \"method borrowing\" - using methods from one object on another:"}],"\n",["$","$Lb",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$10"},"className":"language-javascript"}]}],"\n",["$","h2",null,{"id":"when-to-use-each-method","children":[[["$","a","link-when-to-use-each-method",{"href":"#when-to-use-each-method","className":"anchor"}]],"When to Use Each Method"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Use ",["$","strong",null,{"children":"call"}]," when you want to invoke a function immediately with a specific ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," and comma-separated arguments"]}],"\n",["$","li",null,{"children":["Use ",["$","strong",null,{"children":"apply"}]," when you want to invoke a function immediately with a specific ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," and arguments from an array"]}],"\n",["$","li",null,{"children":["Use ",["$","strong",null,{"children":"bind"}]," when you want to create a new function with a fixed ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," context for later execution"]}],"\n"]}],"\n",["$","h2",null,{"id":"conclusion","children":[[["$","a","link-conclusion",{"href":"#conclusion","className":"anchor"}]],"Conclusion"]}],"\n",["$","p",null,{"children":["JavaScript's ",["$","strong",null,{"children":"call"}],", ",["$","strong",null,{"children":"bind"}],", and ",["$","strong",null,{"children":"apply"}]," methods might seem like minor utilities at first glance, but they're central to mastering JavaScript's function execution model. They give you precise control over how functions execute and what ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}]," refers to—essential knowledge for any serious JavaScript developer."]}],"\n",["$","p",null,{"children":["Once you've mastered these methods, you'll find yourself writing more elegant, reusable code and spend less time debugging mysterious ",["$","code",null,{"dangerouslySetInnerHTML":{"__html":"<span class=\"sh__line\"><span class=\"sh__token--keyword\" style=\"color: var(--sh-keyword)\">this</span></span>"}}],"-related errors."]}]]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"JavaScript's Power Trio: Call, Bind, and Apply | Jitendra Vadlamani"}],["$","meta","3",{"name":"description","content":"Master JavaScript's call, bind, and apply methods to control function execution contexts and leverage the full flexibility of JavaScript's 'this' keyword."}],["$","meta","4",{"name":"robots","content":"index, follow"}],["$","meta","5",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","6",{"property":"og:title","content":"JavaScript's Power Trio: Call, Bind, and Apply"}],["$","meta","7",{"property":"og:description","content":"Master JavaScript's call, bind, and apply methods to control function execution contexts and leverage the full flexibility of JavaScript's 'this' keyword."}],["$","meta","8",{"property":"og:url","content":"https://jitendra-vadlamani.github.io/blog/javascript_call_bind_apply"}],["$","meta","9",{"property":"og:type","content":"article"}],["$","meta","10",{"property":"article:published_time","content":"2025-05-17"}],["$","meta","11",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","12",{"name":"twitter:title","content":"JavaScript's Power Trio: Call, Bind, and Apply"}],["$","meta","13",{"name":"twitter:description","content":"Master JavaScript's call, bind, and apply methods to control function execution contexts and leverage the full flexibility of JavaScript's 'this' keyword."}]]
1:null
